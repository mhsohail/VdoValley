@model VdoValley.ViewModels.VideoViewModel

@{
    ViewBag.Title = "Submit Video";
}

<h2>Submit Video</h2>

<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
<script src="http://api.dmcdn.net/all.js"></script>
<script>
    DM.init({
        apiKey: 'c3aae1f9b8cf64a567a8',
        status: true, // check login status
        cookie: true // enable cookies to allow the server to access the session
    });
</script>
<script>
    $(function () {
        $("#Title").keyup(function () {

            var tokens = $(this).val().split(" ");
            var tags = [];

            $(tokens).each(function (key, value) {
                var tag = {
                    Name:value
                };
                tags.push(tag);
            });

            $.ajax({
                type: "POST",
                url: "@Url.Action("GetTags", "Tags")",
                data: JSON.stringify(tags),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    handleData(response);
                },
                error: function (xhr, status, error) {
                    handleData(xhr.responseText);
                }
            });
        });

        function handleData(data) {
            console.log(data);
            $(data).each(function (key, val) {
                appendTag(val.Name);
            });
        }

        $("#suggested-tags").on("click", ".active", function (e) {
            e.preventDefault();

            // get the tagName which is clicked and needs to be removed
            var tagName = $(this).find("a").text();

            // get hidden Tags input value
            var tags = $("input[name='Tags']").val();

            // split the value by comman to make array
            tagArray = tags.split(",");

            // get index of tagName to be removed
            var index = tagArray.indexOf(tagName);

            // remove the tag from array
            tagArray.splice(index, 1);

            // join the updated array to make updated comma separated string
            var updatedTags = tagArray.join();

            // update the hidden Tags field with new comman separated tags string
            $("input[name='Tags']").val(updatedTags);

            // remove the clicked tag
            $(this).remove();
        });

        $("input[name='InputTags']").keyup(function (e) {
            if ($(this).val().substr(-1) == ",") {
                appendTag($(this).val().substring(0, $(this).val().length - 1));
                $(this).val("");
            }
        });

        function appendTag(tagName) {
            if ($("#suggested-tags").find("#" + tagName).length > 0) return;
            var li = "<li class=\"active\" id=\"" + tagName + "\"><a href=\"#\" style=\"background-color: #EEEEEE;padding:5px;color:grey;text-transform: lowercase;\">" + tagName + "</a></li>";
            $("#suggested-tags").append(li);

            if ($("input[name='Tags").val().length == 0) {
                $("input[name='Tags").val(tagName);
            } else {
                $("input[name='Tags").val($("input[name='Tags").val() + "," + tagName);
            }
        }

        $("#Url").change(function () {
            var input = $(this).val();
            var matches = input.match(/(http:\/\/dai.ly\/)(\S+)/);
            var videoCode = null;
            if (matches == null || matches.length == 0) {
                alert("Invalid short URL");
                console.log(matches);
                return;
            } else {
                console.log(matches[2]);
                videoCode = matches[2];
            }
            
            $.ajax({
                type: "GET",
                url: "https://api.dailymotion.com/video/" + videoCode + "?fields=id,title,description",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    //var obj = $.parseJSON(response);
                    console.log(response);
                    fillVideoDetails(response);
                },
                error: function (xhr, status, error) {
                    //var obj = $.parseJSON(xhr.responseText);
                    console.log(xhr.responseText);
                    fillVideoDetails(xhr.responseText);
                }
            });
        });

        function fillVideoDetails(data) {
            // if video is found, a valid object is returned, json string will be returned otherwise
            if (typeof data === 'object') {
                $("#Title").val(data.title);
                $("#Title").attr("disabled",false);
                $("#Description").val(data.description.replace(/<.*>/g, ""));
                $("#Description").attr("disabled", false);
            } else {
                $("#Title").val("");
                //$("#Title").attr("disabled", true);
                $("#Description").val("");
                //$("#Description").attr("disabled", true);
                var response = $.parseJSON(data);
                alert(response.error.message);
            }
        }

    });


</script>
<!--
    https://api.dailymotion.com/video/x2oiahw?fields=id,title,description
    https://api.dailymotion.com/video/x2oiahw?fields=thumbnail_large_url
-->
<div ng-app="">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Url, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control", style = "width: 350px;" } })
                    @Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmbedCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EmbedCode, new { htmlAttributes = new { @class = "form-control", style = "width: 350px;" } })
                    @Html.ValidationMessageFor(model => model.EmbedCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", ng_model = "name", style = "width: 350px;" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", style = "width: 350px;" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SelectedCategory, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.SelectedCategory, new SelectList(TempData["Categories"] as System.Collections.IEnumerable, "CategoryID", "Name"), "-Select Category-", htmlAttributes: new { @class = "form-control", style = "width: 350px;" })
                    @Html.ValidationMessageFor(model => model.SelectedCategory, "", new { @class = "text-danger" })
                </div>
            </div>
            
            <div class="form-group">
                @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Tags, new { @class = "form-control", style = "width: 350px;", id = "InputTags", Name = "InputTags" })
                    @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
                    <input id="Tags" name="Tags" type="hidden" value="">
                </div>
            </div>
            
            <div class="form-group">
                <style>
                    .nav-pills li a {
                        background-color: lightgray;
                    }
                    #suggested-tags {
                        margin-left: 18%;
                    }
                </style>
                <ul class="nav nav-pills col-lg-offset-6 col-lg-10" id="suggested-tags">
                    <!--<li class="active"><a href="#" style="background-color: #EEEEEE;padding:5px;color:grey;">Home</a></li>-->
                </ul>
            </div>
           
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Submit" class="btn btn-default" />
                    </div>
                </div>
            </div>
    }
</div>

<div>
    @*@Html.ActionLink("Back to List", "Index")*@
</div>
@section styles{
 
<link href="~/Scripts/jquery-tags-input/jquery.tagsinput.css" rel="stylesheet" />
 }
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery-tags-input/jquery.tagsinput.js"></script>
}
